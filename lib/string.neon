%|
 |  File: string
 |
 |  Functions for common string operations.
 |%

EXPORT find
EXPORT hasPrefix
EXPORT hasSuffix
EXPORT isBlank
EXPORT join
EXPORT lower
EXPORT repeat
EXPORT replaceAll
EXPORT replaceOne
EXPORT split
EXPORT splitLines
EXPORT trim
EXPORT trimCharacters
EXPORT upper

%|
 |  Function: find
 |
 |  Find the index of a string within another.
 |%
DECLARE NATIVE FUNCTION find(s: String, t: String): Number

%|
 |  Function: hasPrefix
 |
 |  Return TRUE if a string has a specific prefix.
 |%
FUNCTION hasPrefix(s: String, prefix: String): Boolean
    RETURN s[FIRST TO prefix.length()-1] = prefix
END FUNCTION

%|
 |  Function: hasSuffix
 |
 |  Return TRUE if a string has a specific suffix.
 |%
FUNCTION hasSuffix(s: String, suffix: String): Boolean
    RETURN s[LAST-(suffix.length()-1) TO LAST] = suffix
END FUNCTION

%|
 |  Function: isBlank
 |
 |  Return TRUE if a string is empty or contains only whitespace.
 |%
FUNCTION isBlank(s: String): Boolean
    FOREACH c IN s DO
        IF c NOT IN [" ", "\t"] THEN
            RETURN FALSE
        END IF
    END FOREACH
    RETURN TRUE
END FUNCTION

%|
 |  Function: join
 |
 |  Join an array of strings together using the given delimiter.
 |%
FUNCTION join(a: Array<String>, d: String): String
    VAR r: String := ""
    FOREACH s IN a DO
        IF r.length() > 0 THEN
            r.append(d)
        END IF
        r.append(s)
    END FOREACH
    RETURN r
END FUNCTION

%|
 |  Function: lower
 |
 |  Return a string with all alphabetic characters converted to lower case.
 |%
DECLARE NATIVE FUNCTION lower(s: String): String

%|
 |  Function: repeat
 |
 |  Return a string with a given string repeated the specified number of times.
 |%
FUNCTION repeat(s: String, n: Number): String
    CHECK n >= 0 ELSE
        RAISE InvalidValueException
    END CHECK
    VAR r: String := ""
    VAR t: String := s
    VAR b: Number := n
    WHILE b > 0 DO
        IF odd(b) THEN
            r.append(t)
        END IF
        t.append(t)
        b := b INTDIV 2
    END WHILE
    RETURN r
END FUNCTION

%|
 |  Function: replaceAll
 |
 |  Return a string with all instances of a given string replaced by another string.
 |%
FUNCTION replaceAll(s: String, target: String, replacement: String): String
    % TODO: This can be improved with a findFrom function, which will allow
    % us to search for the next instance of target more efficiently than
    % extracting a substring at each position.
    VAR t: String := s
    VAR i: Number := 0
    WHILE i < t.length() DO
        IF t[i TO i+target.length()-1] = target THEN
            t := t[FIRST TO i-1] & replacement & t[i+target.length() TO LAST]
            i := i + replacement.length()
        ELSE
            INC i
        END IF
    END WHILE
    RETURN t
END FUNCTION

%|
 |  Function: replaceOne
 |
 |  Return a string the first instacne of a given string replaced by another string.
 |%
FUNCTION replaceOne(s: String, target: String, replacement: String): String
    LET i: Number := find(s, target)
    CHECK i >= 0 ELSE
        RETURN s
    END CHECK
    RETURN s[FIRST TO i-1] & replacement & s[i+target.length() TO LAST]
END FUNCTION

%|
 |  Function: split
 |
 |  Split a string into parts using the given delimiter.
 |%
DECLARE NATIVE FUNCTION split(s: String, d: String): Array<String>

%|
 |  Function: splitLines
 |
 |  Split a string into lines using any of CRLF or CR or LF line endings.
 |%
DECLARE NATIVE FUNCTION splitLines(s: String): Array<String>

%|
 |  Function: trimCharacters
 |
 |  Trim given characters from the start and end of a string.
 |%
DECLARE NATIVE FUNCTION trimCharacters(s: String, trimLeadingChars, trimTrailingChars: String): String

%|
 |  Function: trim
 |
 |  Trim spaces from the start and end of a string.
 |%
FUNCTION trim(s: String): String
    RETURN trimCharacters(s, " ", " ")
END FUNCTION

%|
 |  Function: upper
 |
 |  Return a string with all alphabetic characters converted to upper case.
 |%
DECLARE NATIVE FUNCTION upper(s: String): String
