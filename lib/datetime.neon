%|
 |  File: datetime
 |
 |  Functions for date and time manipulation.
 |%

EXPORT Instant
EXPORT DateTime
EXPORT Interval
EXPORT Period
EXPORT Duration
EXPORT now
EXPORT make_from_instant
EXPORT make_from_parts

IMPORT math
IMPORT time

DECLARE EXCEPTION Todo

CONSTANT January  : Number := 1
CONSTANT February : Number := 2
CONSTANT March    : Number := 3
CONSTANT April    : Number := 4
CONSTANT May      : Number := 5
CONSTANT June     : Number := 6
CONSTANT July     : Number := 7
CONSTANT August   : Number := 8
CONSTANT September: Number := 9
CONSTANT October  : Number := 10
CONSTANT November : Number := 11
CONSTANT December : Number := 12

CONSTANT Monday   : Number := 1
CONSTANT Tuesday  : Number := 2
CONSTANT Wednesday: Number := 3
CONSTANT Thursday : Number := 4
CONSTANT Friday   : Number := 5
CONSTANT Saturday : Number := 6
CONSTANT Sunday   : Number := 7

%|
 |  Type: Instant
 |
 |  Represents a particular instant in global time.
 |%
TYPE Instant := Number

%|
 |  Type: DateTime
 |
 |  Represents a particular instant in global time,
 |  broken down to components in UTC.
 |
 |  Fields:
 |      year - year
 |      month - month (1=January, 12=December)
 |      day - day
 |      weekday - weekday (1=Monday, 7=Sunday)
 |      hour - hour
 |      minute - minute
 |      second - second
 |%
TYPE DateTime := RECORD
    instant: Instant
    year: Number
    month: Number
    day: Number
    weekday: Number
    hour: Number
    minute: Number
    second: Number
END RECORD

%|
 |  Type: Interval
 |
 |  Represents a time period between a start and an end time.
 |
 |  Fields:
 |      start - start
 |      end - end
 |%
TYPE Interval := RECORD
    start: DateTime
    end: DateTime
END RECORD

%|
 |  Type: Duration
 |
 |  Represents a specific amount of time measured in seconds.
 |%
TYPE Duration := Number

%|
 |  Type: Period
 |
 |  Represents an amount of time measured by components.
 |
 |  Fields:
 |      years - years
 |      months - months
 |      days - days
 |      hours - hours
 |      minutes - minutes
 |      seconds - seconds
 |%
TYPE Period := RECORD
    years: Number
    months: Number
    days: Number
    hours: Number
    minutes: Number
    seconds: Number
END RECORD

TYPE struct_tm := RECORD
    tm_sec: Number      % seconds (0 - 60)
    tm_min: Number      % minutes (0 - 59)
    tm_hour: Number     % hours (0 - 23)
    tm_mday: Number     % day of month (1 - 31)
    tm_mon: Number      % month of year (0 - 11)
    tm_year: Number     % year - 1900
    tm_wday: Number     % day of week (Sunday = 0)
    tm_yday: Number     % day of year (0 - 365)
    tm_isdst: Number    % is summer time in effect?
END RECORD

DECLARE NATIVE FUNCTION gmtime(t: Number): struct_tm
DECLARE NATIVE FUNCTION timegm(tm: struct_tm): Number

%|
 |  Function: now
 |
 |  Return the current timestamp as a <DateTime>.
 |%
FUNCTION now(): DateTime
    RETURN make_from_instant(time.now())
END FUNCTION

%|
 |  Function: make_from_instant
 |
 |  Convert a specific instant into a <DateTime> record.
 |%
FUNCTION make_from_instant(inst: Instant): DateTime
    LET tm: struct_tm := gmtime(inst)
    RETURN DateTime(
        instant AS inst,
        year AS 1900 + tm.tm_year,
        month AS 1 + tm.tm_mon,
        day AS tm.tm_mday,
        weekday AS 1 + tm.tm_wday,
        hour AS tm.tm_hour,
        minute AS tm.tm_min,
        second AS tm.tm_sec
    )
END FUNCTION

%|
 |  Function: make_from_parts
 |
 |  Given timestamp parts, return a <DateTime> representing the instant.
 |  This function must be called after filling in an empty DateTime.
 |%
FUNCTION make_from_parts(dt: DateTime): DateTime
    VAR tm: struct_tm
    tm.tm_sec := dt.second
    tm.tm_min := dt.minute
    tm.tm_hour := dt.hour
    tm.tm_mday := dt.day
    tm.tm_mon := dt.month - 1
    tm.tm_year := dt.year - 1900
    RETURN make_from_instant(timegm(tm))
END FUNCTION

%|
 |  Function: make_from_string
 |
 |  Make a DateTime from a string representation.
 |%
FUNCTION make_from_string(s: String): DateTime
    RAISE Todo
END FUNCTION

%|
 |  Function: DateTime.minus_duration
 |
 |  Subtract a <Duration> from a <DateTime> and return a new <DateTime>.
 |%
FUNCTION DateTime.minus_duration(self: DateTime, duration: Duration): DateTime
    RETURN make_from_instant(self.instant - duration)
END FUNCTION

%|
 |  Function: DateTime.minus_period
 |
 |  Subtract a <Period> from a <DateTime> and return a new <DateTime>.
 |%
FUNCTION DateTime.minus_period(self: DateTime, period: Period): DateTime
    RAISE Todo
END FUNCTION

%|
 |  Function: DateTime.plus_duration
 |
 |  Add a <Duration> to a <DateTime> and return a new <DateTime>.
 |%
FUNCTION DateTime.plus_duration(self: DateTime, duration: Duration): DateTime
    RETURN make_from_instant(self.instant + duration)
END FUNCTION

%|
 |  Function: DateTime.plus_period
 |
 |  Add a <Period> to a <DateTime> and return a new <DateTime>.
 |%
FUNCTION DateTime.plus_period(self: DateTime, period: Period): DateTime
    VAR dt: DateTime := self
    dt.year := dt.year + period.years
    LET m: Number := dt.month - 1 + period.months
    dt.year := dt.year + math.floor(m / 12)
    dt.month := 1 + (m MOD 12)
    RETURN make_from_parts(dt).plus_duration(86400*period.days + 3600*period.hours + 60*period.minutes + period.seconds)
END FUNCTION

%|
 |  Function: DateTime.to_string
 |
 |  Return an ISO 8601 formatted representation of a <DateTime>.
 |%
FUNCTION DateTime.to_string(self: DateTime): String
    % TODO: add formatting codes for leading zeros when implemented
    RETURN "\(self.year)-\(self.month)-\(self.day)T\(self.hour):\(self.minute):\(self.second)Z"
END FUNCTION

%|
 |  Function: DateTime.with_date
 |
 |  Return a new <DateTime> with the given year, month, and day based on
 |  an existing DateTime.
 |%
FUNCTION DateTime.with_date(self: DateTime, year, month, day: Number): DateTime
    VAR dt: DateTime := self
    dt.year := year
    dt.month := month
    dt.day := day
    RETURN make_from_parts(dt)
END FUNCTION

%|
 |  Function: DateTime.with_year
 |
 |  Return a new <DateTime> with the given year based on an existing DateTime.
 |%
FUNCTION DateTime.with_year(self: DateTime, year: Number): DateTime
    VAR dt: DateTime := self
    dt.year := year
    RETURN make_from_parts(dt)
END FUNCTION

%|
 |  Function: DateTime.with_month
 |
 |  Return a new <DateTime> with the given month based on an existing DateTime.
 |%
FUNCTION DateTime.with_month(self: DateTime, month: Number): DateTime
    VAR dt: DateTime := self
    dt.month := month
    RETURN make_from_parts(dt)
END FUNCTION

%|
 |  Function: DateTime.with_day
 |
 |  Return a new <DateTime> with the given day based on an existing DateTime.
 |%
FUNCTION DateTime.with_day(self: DateTime, day: Number): DateTime
    VAR dt: DateTime := self
    dt.day := day
    RETURN make_from_parts(dt)
END FUNCTION

%|
 |  Function: DateTime.with_time
 |
 |  Return a new <DateTime> with the given hour, minute, and second based on
 |  an existing DateTime.
 |%
FUNCTION DateTime.with_time(self: DateTime, hour, minute, second: Number): DateTime
    VAR dt: DateTime := self
    dt.hour := hour
    dt.minute := minute
    dt.second := second
    RETURN make_from_parts(dt)
END FUNCTION

%|
 |  Function: DateTime.with_hour
 |
 |  Return a new <DateTime> with the given hour based on an existing DateTime.
 |%
FUNCTION DateTime.with_hour(self: DateTime, hour: Number): DateTime
    VAR dt: DateTime := self
    dt.hour := hour
    RETURN make_from_parts(dt)
END FUNCTION

%|
 |  Function: DateTime.with_minute
 |
 |  Return a new <DateTime> with the given minute based on an existing DateTime.
 |%
FUNCTION DateTime.with_minute(self: DateTime, minute: Number): DateTime
    VAR dt: DateTime := self
    dt.minute := minute
    RETURN make_from_parts(dt)
END FUNCTION

%|
 |  Function: DateTime.with_second
 |
 |  Return a new <DateTime> with the given second based on an existing DateTime.
 |%
FUNCTION DateTime.with_second(self: DateTime, second: Number): DateTime
    VAR dt: DateTime := self
    dt.second := second
    RETURN make_from_parts(dt)
END FUNCTION
