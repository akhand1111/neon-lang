EXPORT Socket
EXPORT select

TYPE Handle := Number

TYPE Socket := RECORD
    PRIVATE handle: Handle
END RECORD

DECLARE NATIVE FUNCTION tcp_socket(): Socket

DECLARE NATIVE FUNCTION socket_accept(handle: Handle): Socket
DECLARE NATIVE FUNCTION socket_close(handle: Handle)
DECLARE NATIVE FUNCTION socket_connect(handle: Handle, host: String, port: Number)
DECLARE NATIVE FUNCTION socket_listen(handle: Handle, port: Number)
DECLARE NATIVE FUNCTION socket_recv(handle: Handle, count: Number): Bytes
DECLARE NATIVE FUNCTION socket_send(handle: Handle, data: Bytes)
DECLARE NATIVE FUNCTION socket_select(INOUT read, write, error: Array<Socket>, timeout_seconds: Number): Boolean

% TODO: This function works around some problem with calling a predefined
% function with an Array<Socket> parameter.
FUNCTION select(INOUT read, write, error: Array<Socket>, timeout_seconds: Number): Boolean
    RETURN socket_select(read, write, error, timeout_seconds)
END FUNCTION

FUNCTION Socket.accept(self: Socket): Socket
    RETURN socket_accept(self.handle)
END FUNCTION

FUNCTION Socket.close(self: Socket)
    socket_close(self.handle)
END FUNCTION

FUNCTION Socket.connect(self: Socket, host: String, port: Number)
    socket_connect(self.handle, host, port)
END FUNCTION

FUNCTION Socket.listen(self: Socket, port: Number)
    socket_listen(self.handle, port)
END FUNCTION

FUNCTION Socket.recv(self: Socket, count: Number): Bytes
    RETURN socket_recv(self.handle, count)
END FUNCTION

FUNCTION Socket.send(self: Socket, data: Bytes)
    socket_send(self.handle, data)
END FUNCTION
