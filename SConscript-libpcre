import os
import sys
import tarfile

Import("env")

if not os.path.exists("external/pcre2-10.10/configure"):
    tarfile.open("external/pcre2-10.10.tar.gz").extractall("external")
if sys.platform == "win32":
    shutil.copyfile("external/pcre2-10.10/src/config.h.generic", "external/pcre2-10.10/src/config.h")
    shutil.copyfile("external/pcre2-10.10/src/pcre2.h.generic", "external/pcre2-10.10/src/pcre2.h")
    pcreenv = env.Clone()
    pcreenv.Append(CPPFLAGS=[
        "-DHAVE_CONFIG_H",
        "-DPCRE2_CODE_UNIT_WIDTH=8",
        "-DPCRE2_STATIC",
    ])
    pcreenv.Command("external/pcre2-10.10/src/pcre2_chartables.c", "external/pcre2-10.10/src/pcre2_chartables.c.dist", lambda target, source, env: shutil.copyfile(source[0].path, target[0].path))
    libpcre = pcreenv.Library("external/pcre2-10.10/pcre2.lib", [
        "external/pcre2-10.10/src/pcre2_auto_possess.c",
        "external/pcre2-10.10/src/pcre2_chartables.c",
        "external/pcre2-10.10/src/pcre2_compile.c",
        "external/pcre2-10.10/src/pcre2_config.c",
        "external/pcre2-10.10/src/pcre2_context.c",
        "external/pcre2-10.10/src/pcre2_dfa_match.c",
        "external/pcre2-10.10/src/pcre2_error.c",
        "external/pcre2-10.10/src/pcre2_jit_compile.c",
        "external/pcre2-10.10/src/pcre2_maketables.c",
        "external/pcre2-10.10/src/pcre2_match.c",
        "external/pcre2-10.10/src/pcre2_match_data.c",
        "external/pcre2-10.10/src/pcre2_newline.c",
        "external/pcre2-10.10/src/pcre2_ord2utf.c",
        "external/pcre2-10.10/src/pcre2_pattern_info.c",
        "external/pcre2-10.10/src/pcre2_serialize.c",
        "external/pcre2-10.10/src/pcre2_string_utils.c",
        "external/pcre2-10.10/src/pcre2_study.c",
        "external/pcre2-10.10/src/pcre2_substitute.c",
        "external/pcre2-10.10/src/pcre2_substring.c",
        "external/pcre2-10.10/src/pcre2_tables.c",
        "external/pcre2-10.10/src/pcre2_ucd.c",
        "external/pcre2-10.10/src/pcre2_valid_utf.c",
        "external/pcre2-10.10/src/pcre2_xclass.c",
    ])
else:
    libpcre = env.Command("external/pcre2-10.10/.libs/libpcre2-8.a", "external/pcre2-10.10/configure", "cd external/pcre2-10.10 && ./configure && make")

env.Append(CPPPATH=["external/pcre2-10.10/src"])

Return(["libpcre"])
